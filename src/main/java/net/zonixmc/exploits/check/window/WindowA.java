package net.zonixmc.exploits.check.window;

import net.zonixmc.exploits.event.PacketDecodeEvent;
import net.zonixmc.exploits.violation.controller.ViolationsController;
import net.zonixmc.exploits.violation.model.Violations;
import org.bukkit.Bukkit;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.inventory.InventoryView;

import java.util.Arrays;
import java.util.Objects;
import java.util.logging.Level;

public class WindowA implements Listener {

    @EventHandler
    void on(PacketDecodeEvent event) {

        if (event.isCancelled() || event.getPacket().getVarInt() != 14) return;

        Player player = event.getPlayer();
        short itemId = (short) event.getPacket().getObjects().get("itemId");

        if (itemId == -1) return;

        InventoryView inventoryView = player.getOpenInventory();
        boolean isSynchronized = (short) inventoryView.getCursor().getType().getId() == itemId;

        if (!isSynchronized)
            isSynchronized = Arrays.stream(inventoryView.getBottomInventory().getContents()).filter(Objects::nonNull).anyMatch(context -> itemId == context.getType().getId());

        if (!isSynchronized)
            isSynchronized = Arrays.stream(player.getInventory().getArmorContents()).filter(Objects::nonNull).anyMatch(context -> itemId == context.getType().getId());

        if (!isSynchronized)
            isSynchronized = Arrays.stream(inventoryView.getTopInventory().getContents()).filter(Objects::nonNull).anyMatch(context -> itemId == context.getType().getId());

        if (isSynchronized) return;

        Violations violations = ViolationsController.get(player.getName());

        event.setCancelled(true);

        if (violations.addViolations("windowA", 2)) {

            violations.setPunished(true);
            event.getChannelHandlerContext().channel().close();

            Bukkit.getLogger().log(Level.WARNING, String.format(

                    "[BlockExploits] %s was kicked from the server for exceeding the violation limit (%s)", violations.getOwner(), "windowA"

            ));

        }

    }

}
