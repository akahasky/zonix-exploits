package net.zonixmc.exploits.util;

import io.netty.buffer.ByteBufInputStream;
import net.minecraft.server.v1_8_R3.*;
import org.bukkit.Bukkit;

import java.nio.charset.StandardCharsets;
import java.util.Base64;
import java.util.logging.Level;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class ItemUtil {

    private final static Pattern URL_PATTERN = Pattern.compile("url");

    public static short readItem(PacketDataSerializer packetDataSerializer) { return packetDataSerializer.readShort(); }

    public static NBTTagCompound readNBT(PacketDataSerializer packetDataSerializer) throws Exception {

        packetDataSerializer.readByte();
        packetDataSerializer.readShort();

        int readerIndex = packetDataSerializer.readerIndex();
        byte aByte = packetDataSerializer.readByte();

        packetDataSerializer.readerIndex(readerIndex);

        if (aByte == 0) return null;

        return NBTCompressedStreamTools.a(new ByteBufInputStream(packetDataSerializer), new NBTReadLimiter(12288));

    }

    public static String checkTags(NBTTagCompound nbtTagCompound) {

        if (nbtTagCompound.c().size() > 10)
            return "tagsAmount";

        if (nbtTagCompound.hasKey("Fireworks") || nbtTagCompound.hasKey("Explosions"))
            return "invalidTag";

        if  (nbtTagCompound.hasKey("pages")) {

            NBTTagList pages = nbtTagCompound.getList("pages", 8);

            String lastPage = "";
            int similarPages = 0;

            for (int index = 0; index < pages.size(); index++) {

                if (index > 50)
                    return "pageAmount";

                String page = pages.getString(index);

                if (page.length() > 256)
                    return "pageLength";

                if (page.getBytes(StandardCharsets.UTF_8).length > 288)
                    return "pageBytes";

                int twoByteChars = 0;

                for (int currentChar = 0; currentChar < page.length(); ++currentChar) {

                    if (String.valueOf(page.charAt(currentChar)).getBytes(StandardCharsets.UTF_8).length != 1 && ++twoByteChars > 8)
                        return "pageTwoBytes";

                }

                if (page.equals(lastPage) && ++similarPages > 2)
                    return "pageSimilar";

                lastPage = page;

            }

        }

        if (nbtTagCompound.hasKey("SkullOwner")) {

            NBTTagCompound skullNbtTag = nbtTagCompound.getCompound("SkullOwner");

            if  (skullNbtTag.hasKey("Properties")) {

                NBTTagCompound propertiesNbtTag = skullNbtTag.getCompound("Properties");

                if (propertiesNbtTag.isEmpty())
                    return "skullProperties";

                if (propertiesNbtTag.hasKey("textures")) {

                    NBTTagList textures = propertiesNbtTag.getList("textures", 10);

                    if (textures.isEmpty())
                        return "textureEmpty";

                    for (int index = 0; index < textures.size(); index++) {

                        NBTTagCompound valueNbtTag = textures.get(index);

                        if (!valueNbtTag.hasKey("Value"))
                            continue;

                        String formattedValue = new String(Base64.getDecoder().decode(valueNbtTag.getString("Value"))).trim().replace(" ", "").toLowerCase();
                        Matcher matcher = URL_PATTERN.matcher(formattedValue);

                        while (matcher.find()) {

                            if (formattedValue.substring(matcher.end() + 1).contains("textures.minecraft.net/texture/"))
                                continue;

                            return "textureUrl";

                        }

                    }

                }

            }

        }

        if (nbtTagCompound.toString().getBytes(StandardCharsets.UTF_8).length >= 4096)
            Bukkit.getLogger().log(Level.WARNING, String.format("[BlockExploits] Too big item (%s)", nbtTagCompound));

        return null;

    }

}
