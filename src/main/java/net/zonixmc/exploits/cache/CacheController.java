package net.zonixmc.exploits.cache;

import com.google.common.cache.Cache;
import com.google.common.cache.CacheBuilder;
import com.google.common.collect.Maps;
import org.bukkit.Bukkit;
import org.bukkit.plugin.Plugin;

import java.util.Map;
import java.util.concurrent.TimeUnit;

public class CacheController {

    private static final Map<String, Cache> caches = Maps.newHashMap();

    public static void init(Plugin plugin) {

        Bukkit.getScheduler().runTaskTimerAsynchronously(plugin, () -> caches.values().forEach(Cache::cleanUp), 120000, 120000);

    }

    public static void add(String context, Object key, Object value, long resetTimeMillis) {

        Cache currentCache = caches.get(context);

        if (currentCache == null) {

            currentCache = CacheBuilder.newBuilder().concurrencyLevel(2).expireAfterWrite(resetTimeMillis, TimeUnit.MILLISECONDS).build();
            caches.put(context, currentCache);

        }

        currentCache.put(key, value);

    }

    public static void invalidate(String context, Object key) {

        Cache currentCache = caches.get(context);

        if (currentCache == null) return;

        currentCache.invalidate(key);

    }

    public static Object getIfPresent(String context, Object key) {

        Cache currentCache = caches.get(context);

        if (currentCache == null) return null;

        return currentCache.getIfPresent(key);

    }

}
