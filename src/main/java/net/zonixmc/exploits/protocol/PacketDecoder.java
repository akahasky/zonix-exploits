package net.zonixmc.exploits.protocol;

import net.zonixmc.exploits.event.PacketDecodeEvent;
import net.zonixmc.exploits.protocol.model.DecodedPacket;
import net.zonixmc.exploits.violation.controller.ViolationsController;
import io.netty.buffer.ByteBuf;
import io.netty.channel.ChannelHandlerContext;
import io.netty.handler.codec.ByteToMessageDecoder;
import lombok.AllArgsConstructor;
import net.minecraft.server.v1_8_R3.PacketDataSerializer;
import org.bukkit.Bukkit;
import org.bukkit.entity.Player;

import java.util.List;
import java.util.logging.Level;

@AllArgsConstructor
public class PacketDecoder extends ByteToMessageDecoder {

    private final Player player;

    @Override
    protected void decode(ChannelHandlerContext channelHandlerContext, ByteBuf byteBuf, List<Object> list) {

        if (!player.isOnline() || !channelHandlerContext.channel().isActive() || !byteBuf.isReadable()) return;

        ByteBuf copy = byteBuf.copy();

        try {

            PacketDataSerializer dataSerializer = new PacketDataSerializer(copy);
            PacketDecodeEvent event = new PacketDecodeEvent(player, channelHandlerContext, new DecodedPacket(dataSerializer));

            Bukkit.getPluginManager().callEvent(event);

            if (!event.isCancelled()) {

                if (ViolationsController.exists(player.getName())
                        && ViolationsController.get(player.getName()).isPunished()) return;

                list.add(byteBuf.readBytes(byteBuf.readableBytes()));

            }

            else byteBuf.skipBytes(byteBuf.readableBytes());

        }

        catch (Exception exception) {

            if (exception instanceof RuntimeException) {

                list.clear();
                channelHandlerContext.close();

                Bukkit.getLogger().log(Level.WARNING, String.format(

                        "[BlockExploits] %s was kicked from the server for exceeding the violation limit (%s)", player.getName(), "exceptionA"

                ));

                return;

            }

            exception.printStackTrace();

        }

    }

}
