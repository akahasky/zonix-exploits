package net.zonixmc.exploits.protocol.model;

import net.zonixmc.exploits.util.ItemUtil;
import com.google.common.collect.Maps;
import lombok.Getter;
import net.minecraft.server.v1_8_R3.BlockPosition;
import net.minecraft.server.v1_8_R3.PacketDataSerializer;

import java.util.Map;

@Getter
public class DecodedPacket {

    private final PacketDataSerializer dataSerializer;
    private final int varInt;
    private final Map<String, Object> objects = Maps.newHashMap();

    public DecodedPacket(PacketDataSerializer dataSerializer) throws Exception {

        this.dataSerializer = dataSerializer;
        this.varInt = dataSerializer.e();

        switch (varInt) {

            case 8: {

                BlockPosition blockPosition = dataSerializer.c();

                objects.put("x", blockPosition.getX());
                objects.put("y", blockPosition.getY());
                objects.put("z", blockPosition.getZ());

                dataSerializer.readUnsignedByte();

                short itemId = ItemUtil.readItem(dataSerializer);

                objects.put("itemId", itemId);

                if (itemId == -1) return;

                objects.put("itemTag", ItemUtil.readNBT(dataSerializer));

                break;

            }

            case 14: {

                dataSerializer.readByte();

                objects.put("slot", dataSerializer.readShort());

                dataSerializer.readByte();
                dataSerializer.readShort();
                dataSerializer.readByte();

                short itemId = ItemUtil.readItem(dataSerializer);

                objects.put("itemId", itemId);

                if (itemId == -1) return;

                objects.put("itemTag", ItemUtil.readNBT(dataSerializer));

                break;

            }

            case 16: {

                dataSerializer.readShort();

                short itemId = ItemUtil.readItem(dataSerializer);

                objects.put("itemId", itemId);

                if (itemId == -1) return;

                objects.put("itemTag", ItemUtil.readNBT(dataSerializer));

                break;

            }

            case 23: {

                String channel = dataSerializer.c(20);

                objects.put("channel", channel);

                if (!channel.equals("MC|BSign") && !channel.equals("MC|BEdit") && !channel.equals("MC|BOpen")) return;

                short itemId = ItemUtil.readItem(dataSerializer);

                objects.put("itemId", itemId);

                if (itemId == -1) return;

                objects.put("itemTag", ItemUtil.readNBT(dataSerializer));

                break;

            }

        }

    }


}
